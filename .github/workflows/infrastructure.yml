name: Infrastructure Deployment

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
    paths:
      - "terraform/**"
      - "kubernetes/**"
      - ".github/workflows/infrastructure.yml"
  pull_request:
    branches: [main]
    paths:
      - "terraform/**"
      - "kubernetes/**"
      - ".github/workflows/infrastructure.yml"
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.5"
  TF_WORKING_DIR: "./terraform"

jobs:
  # ============================================
  # Terraform Validation
  # ============================================
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

  # ============================================
  # Terraform Plan
  # ============================================
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check GCP Credentials
        id: check-gcp
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] || [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "has-credentials=false" >> $GITHUB_OUTPUT
          else
            echo "has-credentials=true" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate to Google Cloud
        if: steps.check-gcp.outputs.has-credentials == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        if: steps.check-gcp.outputs.has-credentials == 'true'
        uses: google-github-actions/setup-gcloud@v2

      - name: Save GCP credentials to file
        if: steps.check-gcp.outputs.has-credentials == 'true'
        run: echo '${{ secrets.GCP_SA_KEY }}' > ${{ github.workspace }}/gcp-key.json

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan (with GCP)
        if: steps.check-gcp.outputs.has-credentials == 'true'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="enable_monitoring=false" \
            -out=tfplan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json

      - name: Terraform Plan (local only)
        if: steps.check-gcp.outputs.has-credentials == 'false'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan -json > tfplan.json || true

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–

            <details><summary>Show Plan</summary>

            \`\`\`
            Terraform plan generated successfully.
            View the full plan in the workflow artifacts.
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  # ============================================
  # Terraform Apply
  # ============================================
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment:
      name: production
      url: https://console.cloud.google.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify GCP Credentials
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ] || [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "Error: GCP credentials not configured"
            echo "Please set GCP_SA_KEY and GCP_PROJECT_ID secrets"
            exit 1
          fi
          echo "GCP credentials verified"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="enable_monitoring=false" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Save Terraform outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform output -json > terraform-outputs.json

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json

  # ============================================
  # Kubernetes Validation
  # ============================================
  kubernetes-validate:
    name: Validate Kubernetes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: |
          kubeval --ignore-missing-schemas kubernetes/*.yaml

      - name: Run kubesec
        uses: controlplaneio/kubesec-action@v0.0.2
        continue-on-error: true
        with:
          input: kubernetes/microservices.yaml
          format: json
          exit-code: 0

  # ============================================
  # Kubernetes Dry Run
  # ============================================
  kubernetes-dry-run:
    name: Kubernetes Dry Run
    runs-on: ubuntu-latest
    needs: [kubernetes-validate, terraform-apply]
    if: |
      always() &&
      needs.kubernetes-validate.result == 'success' &&
      (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped') &&
      (github.event_name == 'push' && github.ref == 'refs/heads/main' ||
       github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials canteen-gke-cluster \
            --zone us-central1-a \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Dry run Kubernetes manifests
        continue-on-error: true
        run: |
          kubectl apply --dry-run=server -f kubernetes/

      - name: Upload dry run results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kubernetes-dry-run-results
          path: kubernetes/
