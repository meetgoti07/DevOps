name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GKE_CLUSTER: canteen-gke-cluster
  GKE_ZONE: us-central1-a

jobs:
  # ============================================
  # Code Quality and Security Checks
  # ============================================
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # ============================================
  # Build and Test User Service (Java)
  # ============================================
  build-user-service:
    name: Build User Service
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        working-directory: ./user-service
        run: |
          ./mvnw clean package -DskipTests
          ./mvnw test

      - name: Run security scan on dependencies
        working-directory: ./user-service
        run: ./mvnw dependency-check:check || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: user-service-jar
          path: user-service/target/*.jar

  # ============================================
  # Build and Test Menu Service (Node.js)
  # ============================================
  build-menu-service:
    name: Build Menu Service
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: menu-service/package-lock.json

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./menu-service
        run: pnpm install

      - name: Run linter
        working-directory: ./menu-service
        run: pnpm run lint || true

      - name: Run tests
        working-directory: ./menu-service
        run: pnpm test || true

      - name: Audit dependencies
        working-directory: ./menu-service
        run: pnpm audit --audit-level=high || true

  # ============================================
  # Build and Test Order Service (Python/Django)
  # ============================================
  build-order-service:
    name: Build Order Service
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        working-directory: ./order-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov bandit safety

      - name: Run tests
        working-directory: ./order-service
        run: pytest --cov=orders --cov-report=xml || true

      - name: Security check with Bandit
        working-directory: ./order-service
        run: bandit -r orders/ -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        working-directory: ./order-service
        run: safety check --json || true

  # ============================================
  # Build and Test Queue Service (Go)
  # ============================================
  build-queue-service:
    name: Build Queue Service
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache-dependency-path: queue-service/go.sum

      - name: Download dependencies
        working-directory: ./queue-service
        run: go mod download

      - name: Run tests
        working-directory: ./queue-service
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run security check
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out gosec-results.sarif ./queue-service/..."

      - name: Build binary
        working-directory: ./queue-service
        run: go build -v -o queue-service

  # ============================================
  # Build and Test Payment Service (Python/Flask)
  # ============================================
  build-payment-service:
    name: Build Payment Service
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        working-directory: ./payment-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov bandit safety

      - name: Run tests
        working-directory: ./payment-service
        run: pytest --cov --cov-report=xml || true

      - name: Security check with Bandit
        working-directory: ./payment-service
        run: bandit -r . -f json -o bandit-report.json || true

  # ============================================
  # Build and Test Frontend (Next.js)
  # ============================================
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install

      - name: Run linter
        working-directory: ./frontend
        run: pnpm run lint || true

      - name: Build application
        working-directory: ./frontend
        run: pnpm run build
        env:
          NEXT_PUBLIC_USER_SERVICE_URL: http://localhost:8081
          NEXT_PUBLIC_MENU_SERVICE_URL: http://localhost:8082
          NEXT_PUBLIC_ORDER_SERVICE_URL: http://localhost:8083
          NEXT_PUBLIC_QUEUE_SERVICE_URL: http://localhost:8084
          NEXT_PUBLIC_PAYMENT_SERVICE_URL: http://localhost:8085

  # ============================================
  # Build Docker Images
  # ============================================
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs:
      [
        build-user-service,
        build-menu-service,
        build-order-service,
        build-queue-service,
        build-payment-service,
        build-frontend,
      ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service:
          [
            user-service,
            menu-service,
            order-service,
            queue-service,
            payment-service,
            frontend,
            api-gateway,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Google Container Registry
        uses: docker/login-action@v3
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gcr.io/${{ env.GCP_PROJECT_ID }}/canteen-${{ matrix.service }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gcr.io/${{ env.GCP_PROJECT_ID }}/canteen-${{ matrix.service }}:latest
          format: "sarif"
          output: "trivy-image-results.sarif"

  # ============================================
  # Deploy to GKE
  # ============================================
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Update manifests with Project ID
        run: |
          cd kubernetes
          sed -i "s|gcr.io/PROJECT_ID|gcr.io/${{ env.GCP_PROJECT_ID }}|g" microservices.yaml
          sed -i "s|gcr.io/PROJECT_ID|gcr.io/${{ env.GCP_PROJECT_ID }}|g" frontend-gateway.yaml

      - name: Deploy to Kubernetes
        run: |
          cd kubernetes

          # Apply ConfigMaps and Secrets (in case updated)
          kubectl apply -f namespace.yaml || true
          kubectl apply -f configmap.yaml || true

          # Deploy/Update databases (idempotent)
          kubectl apply -f postgres.yaml
          kubectl apply -f mongodb.yaml
          kubectl apply -f mysql.yaml
          kubectl apply -f redis.yaml
          kubectl apply -f rabbitmq.yaml

          # Deploy/Update microservices
          kubectl apply -f microservices.yaml

          # Deploy/Update frontend and gateway
          kubectl apply -f frontend-gateway.yaml

          # Update image tags to use specific commit SHA
          for service in user-service menu-service order-service queue-service payment-service frontend api-gateway; do
            kubectl set image deployment/$service \
              $service=gcr.io/${{ env.GCP_PROJECT_ID }}/canteen-$service:${{ github.sha }} \
              -n canteen-system
          done

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/canteen-order-service -n canteen-system --timeout=5m
          kubectl rollout status deployment/canteen-frontend -n canteen-system --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods -n canteen-system
          kubectl get services -n canteen-system

  # ============================================
  # Integration Tests
  # ============================================
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-to-gke
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}

      - name: Run health checks
        run: |
          # Get service endpoints
          kubectl get services -n canteen-system

          # Wait for services to be ready
          sleep 30

          # Check health endpoints
          for service in user-service menu-service order-service queue-service payment-service; do
            kubectl run curl-test --image=curlimages/curl --rm -i --restart=Never -- \
              curl -f http://canteen-$service.canteen-system.svc.cluster.local/health || true
          done

      - name: Run smoke tests
        run: |
          echo "Smoke tests would run here"
          # Add actual smoke test commands

  # ============================================
  # Notify on Success/Failure
  # ============================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()

    steps:
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to GKE: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
