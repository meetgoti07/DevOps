# SQLite is embedded, so Payment Service doesn't need a separate database deployment
# User Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: canteen-system
  labels:
    app: user-service
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        component: microservice
    spec:
      containers:
        - name: user-service
          image: gcr.io/canteen-qm-1761557373/canteen-user-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres:5432/userdb"
            - name: SPRING_DATASOURCE_USERNAME
              value: "admin"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "admin123"
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5

---
# User Service Service
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: canteen-system
  labels:
    app: user-service
    component: microservice
spec:
  selector:
    app: user-service
  ports:
    - port: 8080
      targetPort: 8080
  type: ClusterIP

---
# Menu Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: menu-service
  namespace: canteen-system
  labels:
    app: menu-service
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: menu-service
  template:
    metadata:
      labels:
        app: menu-service
        component: microservice
    spec:
      containers:
        - name: menu-service
          image: gcr.io/canteen-qm-1761557373/canteen-menu-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3001
          env:
            - name: MONGODB_URI
              value: "mongodb://mongodb:27017/menudb"
            - name: PORT
              value: "3001"
          resources:
            requests:
              memory: "256Mi"
              cpu: "125m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 5

---
# Menu Service Service
apiVersion: v1
kind: Service
metadata:
  name: menu-service
  namespace: canteen-system
  labels:
    app: menu-service
    component: microservice
spec:
  selector:
    app: menu-service
  ports:
    - port: 3001
      targetPort: 3001
  type: ClusterIP

---
# Order Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: canteen-system
  labels:
    app: order-service
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        component: microservice
    spec:
      containers:
        - name: order-service
          image: gcr.io/canteen-qm-1761557373/canteen-order-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URL
              value: "mysql://admin:admin123@mysql:3306/orderdb"
            - name: RABBITMQ_URL
              value: "amqp://guest:guest@rabbitmq:5672/"
            - name: DJANGO_SETTINGS_MODULE
              value: "orderservice.settings"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /orders/health/
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /orders/health/
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 5

---
# Order Service Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: canteen-system
  labels:
    app: order-service
    component: microservice
spec:
  selector:
    app: order-service
  ports:
    - port: 8000
      targetPort: 8000
  type: ClusterIP

---
# Queue Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-service
  namespace: canteen-system
  labels:
    app: queue-service
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: queue-service
  template:
    metadata:
      labels:
        app: queue-service
        component: microservice
    spec:
      containers:
        - name: queue-service
          image: gcr.io/canteen-qm-1761557373/canteen-queue-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8002
          env:
            - name: REDIS_URL
              value: "redis:6379"
            - name: RABBITMQ_URL
              value: "amqp://guest:guest@rabbitmq:5672/"
          resources:
            requests:
              memory: "256Mi"
              cpu: "125m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8002
            initialDelaySeconds: 10
            periodSeconds: 5

---
# Queue Service Service
apiVersion: v1
kind: Service
metadata:
  name: queue-service
  namespace: canteen-system
  labels:
    app: queue-service
    component: microservice
spec:
  selector:
    app: queue-service
  ports:
    - port: 8002
      targetPort: 8002
  type: ClusterIP

---
# Payment Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: canteen-system
  labels:
    app: payment-service
    component: microservice
spec:
  replicas: 2
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
        component: microservice
    spec:
      containers:
        - name: payment-service
          image: gcr.io/canteen-qm-1761557373/canteen-payment-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          env:
            - name: RABBITMQ_URL
              value: "amqp://guest:guest@rabbitmq:5672/"
            - name: FLASK_ENV
              value: "production"
          volumeMounts:
            - name: payment-storage
              mountPath: /app/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "125m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: payment-storage
          persistentVolumeClaim:
            claimName: payment-pvc

---
# Payment Service Service
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: canteen-system
  labels:
    app: payment-service
    component: microservice
spec:
  selector:
    app: payment-service
  ports:
    - port: 5000
      targetPort: 5000
  type: ClusterIP

---
# Payment Service PVC (for SQLite data)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: payment-pvc
  namespace: canteen-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
